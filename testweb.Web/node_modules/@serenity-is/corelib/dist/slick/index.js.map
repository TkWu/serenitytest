{
  "version": 3,
  "sources": ["../../src/slick/aggregators.ts", "../../src/slick/remoteview.ts"],
  "sourcesContent": ["\uFEFFimport { escape, Column, GroupTotals, NonDataRow, convertCompatFormatter } from \"@serenity-is/sleekgrid\";\r\nimport { formatNumber, htmlEncode, tryGetText } from \"@serenity-is/corelib/q\";\r\n\r\nexport {}\r\n\r\nexport namespace Aggregators\r\n{\r\n    export function Avg(field: string): void {\r\n        this.field_ = field;\r\n        this.type_ = \"Avg\";\r\n\r\n        this.init = function () {\r\n            this.count_ = 0;\r\n            this.nonNullCount_ = 0;\r\n            this.sum_ = 0;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            this.count_++;\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                this.nonNullCount_++;\r\n                this.sum_ += parseFloat(val);\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.avg) {\r\n                groupTotals.avg = {};\r\n            }\r\n            if (this.nonNullCount_ != 0) {\r\n                groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;\r\n            }\r\n        };\r\n    }\r\n\r\n    export function WeightedAvg(field: string, weightedField: string) {\r\n        this.field_ = field;\r\n        this.type_ = \"WeightedAvg\";\r\n        this.weightedField_ = weightedField;\r\n\r\n        this.init = function () {\r\n            this.sum_ = 0;\r\n            this.weightedSum_ = 0;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            var valWeighted = item[this.weightedField_];\r\n            if (this.isValid(val) && this.isValid(valWeighted)) {\r\n                this.weightedSum_ += parseFloat(valWeighted);\r\n                this.sum_ += parseFloat(val) * parseFloat(valWeighted);\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.avg) {\r\n                groupTotals.avg = {};\r\n            }\r\n\r\n            if (this.sum_ && this.weightedSum_) {\r\n                groupTotals.avg[this.field_] = this.sum_ / this.weightedSum_;\r\n            }\r\n        };\r\n\r\n        this.isValid = function (val: any) {\r\n            return val !== null && val !== \"\" && !isNaN(val);\r\n        };\r\n    }\r\n\r\n    export function Min(field: string): void {\r\n        this.field_ = field;\r\n        this.type_ = \"Min\";\r\n\r\n        this.init = function () {\r\n            this.min_ = null;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                if (this.min_ == null || val < this.min_) {\r\n                    this.min_ = val;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.min) {\r\n                groupTotals.min = {};\r\n            }\r\n            groupTotals.min[this.field_] = this.min_;\r\n        }\r\n    }\r\n\r\n    export function Max(field: string): void {\r\n        this.field_ = field;\r\n        this.type_ = \"Max\";\r\n\r\n        this.init = function () {\r\n            this.max_ = null;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                if (this.max_ == null || val > this.max_) {\r\n                    this.max_ = val;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.max) {\r\n                groupTotals.max = {};\r\n            }\r\n            groupTotals.max[this.field_] = this.max_;\r\n        }\r\n    }\r\n\r\n    export function Sum(field: string): void {\r\n        this.field_ = field;\r\n        this.type = \"_Sum\";\r\n\r\n        this.init = function () {\r\n            this.sum_ = null;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                this.sum_ += parseFloat(val);\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.sum) {\r\n                groupTotals.sum = {};\r\n            }\r\n            groupTotals.sum[this.field_] = this.sum_;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace AggregateFormatting {\r\n    export function formatMarkup<TItem = any>(totals: GroupTotals, column: Column<TItem>, aggType: string): string {\r\n        var textKey = (aggType.substring(0, 1).toUpperCase() + aggType.substring(1));\r\n        var text = tryGetText(textKey);\r\n    \r\n        var value = totals[aggType][column.field];\r\n        var formattedValue = formatValue(column, value);\r\n    \r\n        return \"<span class='aggregate agg-\" + aggType + \"'  title='\" + text + \"'>\" +\r\n            formattedValue +\r\n            \"</span>\";\r\n    }\r\n\r\n    export function formatValue(column: Column, value: number): string {\r\n\r\n        var formatter = column.format ?? (column.formatter ? convertCompatFormatter(column.formatter) : null);\r\n\r\n        if (formatter != null) {\r\n            var item = new NonDataRow();\r\n            item[column.field] = value;\r\n            try {\r\n                return formatter({ column, escape, item, value });\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n\r\n        if (typeof value === \"number\") {\r\n            var displayFormat = column.sourceItem?.displayFormat ?? \"#,##0.##\";\r\n            return htmlEncode(formatNumber(value, displayFormat));\r\n        }\r\n        else\r\n            return htmlEncode(value);\r\n    }\r\n\r\n    export function groupTotalsFormatter<TItem = any>(totals: GroupTotals, column: Column<TItem>): string {\r\n        if (!totals || !column)\r\n            return \"\";\r\n    \r\n        var text: string = null;\r\n    \r\n        [\"sum\", \"avg\", \"min\", \"max\", \"cnt\"].forEach(function (aggType) {\r\n            if (text == null && totals[aggType] && totals[aggType][column.field] != null) {\r\n                text = formatMarkup(totals, column, aggType);\r\n                return false;\r\n            }\r\n        });\r\n    \r\n        return text || \"\";\r\n    }       \r\n}", "\uFEFFimport { deepClone, extend, ListRequest, ListResponse, notifyError, ServiceResponse, text, tryGetText } from \"@serenity-is/corelib/q\";\r\nimport { GroupInfo, PagingOptions, SummaryOptions } from \"./slicktypes\";\r\nimport { Event, EventData, Grid, gridDefaults, Group, GroupTotals } from \"@serenity-is/sleekgrid\";\r\nimport { AggregateFormatting } from \"./aggregators\";\r\n\r\nexport interface RemoteViewOptions {\r\n    autoLoad?: boolean;\r\n    idField?: string;\r\n    contentType?: string;\r\n    dataType?: string;\r\n    filter?: any;\r\n    params?: any;\r\n    onSubmit?: CancellableViewCallback<any>;\r\n    url?: string;\r\n    localSort?: boolean;\r\n    sortBy?: any;\r\n    rowsPerPage?: number;\r\n    seekToPage?: number;\r\n    onProcessData?: RemoteViewProcessCallback<any>;\r\n    method?: string;\r\n    inlineFilters?: boolean;\r\n    groupItemMetadataProvider?: Slick.Data.GroupItemMetadataProvider;\r\n    onAjaxCall?: RemoteViewAjaxCallback<any>;\r\n    getItemMetadata?: (p1?: any, p2?: number) => any;\r\n    errorMsg?: string;\r\n}\r\n    \r\nexport interface PagingInfo {\r\n    rowsPerPage: number;\r\n    page: number,\r\n    totalCount: number;\r\n    loading: boolean,\r\n    error: string;\r\n    dataView: RemoteView<any>\r\n}\r\n\r\nexport type CancellableViewCallback<TEntity> = (view: RemoteView<TEntity>) => boolean | void;\r\nexport type RemoteViewAjaxCallback<TEntity> = (view: RemoteView<TEntity>, options: JQueryAjaxSettings) => boolean | void;\r\nexport type RemoteViewFilter<TEntity> = (item: TEntity, view: RemoteView<TEntity>) => boolean;\r\nexport type RemoteViewProcessCallback<TEntity> = (data: ListResponse<TEntity>, view: RemoteView<TEntity>) => ListResponse<TEntity>;\r\n\r\nexport interface RemoteView<TEntity> {\r\n    onSubmit: CancellableViewCallback<TEntity>;\r\n    onDataChanged: Event;\r\n    onDataLoading: Event;\r\n    onDataLoaded: Event;\r\n    onPagingInfoChanged: Event;\r\n    onRowCountChanged: Event;\r\n    onRowsChanged: Event;\r\n    onRowsOrCountChanged: Event;\r\n    getPagingInfo(): PagingInfo;\r\n    onGroupExpanded: Event,\r\n    onGroupCollapsed: Event,\r\n    onAjaxCall: RemoteViewAjaxCallback<TEntity>;\r\n    onProcessData: RemoteViewProcessCallback<TEntity>;\r\n    addData(data: ListResponse<TEntity>): void;\r\n    beginUpdate(): void;\r\n    endUpdate(): void;\r\n    deleteItem(id: any): void;\r\n    getItems(): TEntity[];\r\n    setFilter(filter: RemoteViewFilter<TEntity>): void;\r\n    getFilter(): RemoteViewFilter<TEntity>;\r\n    getFilteredItems(): any;\r\n    fastSort: any;\r\n    setItems(items: any[], newIdProperty?: boolean | string): void;\r\n    getIdPropertyName(): string;\r\n    getItemById(id: any): TEntity;\r\n    getGrandTotals(): any;\r\n    getGrouping(): GroupInfo<TEntity>[];\r\n    getGroups(): any[];\r\n    getRowById(id: any): number;\r\n    getRowByItem(item: any): number;\r\n    getRows(): any[];\r\n    mapItemsToRows(itemArray: any[]): any[];\r\n    mapRowsToIds(rowArray: number[]): any[];\r\n    mapIdsToRows(idAray: any[]): number[];\r\n    setFilterArgs(args: any): void;\r\n    setRefreshHints(hints: any[]): void;\r\n    insertItem(insertBefore: number, item: any): void;\r\n    sortedAddItem(item: any): void;\r\n    sortedUpdateItem(id: any, item: any): void;\r\n    syncGridSelection(grid: any, preserveHidden?: boolean, preserveHiddenOnSelectionChange?: boolean): void;\r\n    syncGridCellCssStyles(grid: any, key: string): void;\r\n    getItemMetadata(i: number): any;\r\n    updateItem(id: any, item: TEntity): void;\r\n    addItem(item: TEntity): void;\r\n    getIdxById(id: any): any;\r\n    getItemByIdx(index: number): any;\r\n    setGrouping(groupInfo: GroupInfo<TEntity>[]): void;\r\n    collapseAllGroups(level: number): void;\r\n    expandAllGroups(level: number): void;\r\n    expandGroup(keys: any[]): void;\r\n    collapseGroup(keys: any[]): void;\r\n    setSummaryOptions(options: SummaryOptions): void;\r\n    setPagingOptions(options: PagingOptions): void;\r\n    refresh(): void;\r\n    populate(): void;\r\n    populateLock(): void;\r\n    populateUnlock(): void;\r\n    getItem(row: number): any;\r\n    getLength(): number;\r\n    rowsPerPage: number;\r\n    errormsg: string;\r\n    params: any;\r\n    getLocalSort(): boolean;\r\n    setLocalSort(value: boolean): void;\r\n    sort(comparer?: (a: any, b: any) => number, ascending?: boolean): void;\r\n    reSort(): void;\r\n    sortBy: string[];\r\n    url: string;\r\n    method: string;\r\n    idField: string;\r\n    seekToPage?: number;\r\n}\r\n\r\nexport class RemoteView<TEntity> {\r\n    constructor(options: RemoteViewOptions) {\r\n        var self = this;\r\n\r\n        if (gridDefaults != null && gridDefaults.groupTotalsFormatter === void 0)\r\n            gridDefaults.groupTotalsFormatter = AggregateFormatting.groupTotalsFormatter;\r\n        \r\n        var idProperty: string;\r\n        var items: any[] = [];\r\n        var rows: any[] = [];\r\n        var idxById = {};\r\n        var rowsById: any = null;\r\n        var filter: any = null;\r\n        var updated: any = null;\r\n        var suspend = 0;\r\n\r\n        var sortAsc = true;\r\n        var fastSortField: string;\r\n        var sortComparer: any;\r\n        var refreshHints: any = {};\r\n        var prevRefreshHints: any = {};\r\n        var filterArgs: any;\r\n        var filteredItems: any = [];\r\n        var compiledFilter: any;\r\n        var compiledFilterWithCaching: any;\r\n        var filterCache: any[] = [];\r\n\r\n        var groupingInfoDefaults = {\r\n            getter: <any>null,\r\n            formatter: <any>null,\r\n            comparer: function (a: any, b: any) {\r\n                return (a.value === b.value ? 0 :\r\n                    (a.value > b.value ? 1 : -1)\r\n                );\r\n            },\r\n            predefinedValues: <any[]>[],\r\n            aggregateEmpty: false,\r\n            aggregateCollapsed: false,\r\n            aggregateChildGroups: false,\r\n            collapsed: false,\r\n            displayTotalsRow: true,\r\n            lazyTotalsCalculation: false\r\n        };\r\n        var summaryOptions: any = {};\r\n        var groupingInfos: any[] = [];\r\n        var groups: any[] = [];\r\n        var toggledGroupsByLevel: any[] = [];\r\n        var groupingDelimiter = ':|:';\r\n\r\n        var page = 1;\r\n        var totalRows = 0;\r\n\r\n        var onDataChanged: Event = new Event();\r\n        var onDataLoading: Event = new Event();\r\n        var onDataLoaded: Event = new Event();\r\n        var onGroupExpanded: Event = new Event();\r\n        var onGroupCollapsed: Event = new Event();\r\n        var onPagingInfoChanged: Event = new Event();\r\n        var onRowCountChanged: Event = new Event();\r\n        var onRowsChanged: Event = new Event();\r\n        var onRowsOrCountChanged: Event = new Event();\r\n\r\n        var loading: any = false;\r\n        var errorMessage: string = null;\r\n        var populateLocks = 0;\r\n        var populateCalls = 0;\r\n        var contentType: string;\r\n        var dataType: string;\r\n        var totalCount: number = null;\r\n        var localSort: boolean = options?.localSort ?? false;\r\n\r\n        var intf: RemoteView<TEntity>;\r\n\r\n        function beginUpdate() {\r\n            suspend++;\r\n        }\r\n\r\n        function endUpdate() {\r\n            suspend--;\r\n            if (suspend <= 0)\r\n                refresh();\r\n        }\r\n\r\n        function setRefreshHints(hints: any) {\r\n            refreshHints = hints;\r\n        }\r\n\r\n        function setFilterArgs(args: any) {\r\n            filterArgs = args;\r\n        }\r\n\r\n        function updateIdxById(startingIndex?: number) {\r\n            startingIndex = startingIndex || 0;\r\n            var id: any;\r\n            for (var i = startingIndex, l = items.length; i < l; i++) {\r\n                id = items[i][idProperty];\r\n                if (id === undefined) {\r\n                    var msg = \"Each data element must implement a unique '\" +\r\n                        idProperty + \"' property. Object at index '\" + i + \"' \" +\r\n                        \"has no identity value: \";\r\n\r\n                    msg += (<any>$).toJSON(items[i]);\r\n                    throw msg;\r\n                }\r\n                idxById[id] = i;\r\n            }\r\n        }\r\n\r\n        function ensureIdUniqueness() {\r\n            var id: any;\r\n            for (var i = 0, l = items.length; i < l; i++) {\r\n                id = items[i][idProperty];\r\n                if (id === undefined || idxById[id] !== i) {\r\n                    var msg = \"Each data element must implement a unique '\" +\r\n                        idProperty + \"' property. Object at index '\" + i + \"' \";\r\n\r\n                    if (id == undefined)\r\n                        msg += \"has no identity value: \";\r\n                    else\r\n                        msg += \"has repeated identity value '\" + id + \"': \";\r\n\r\n                    msg += (<any>$).toJSON(items[i]);\r\n                    throw msg;\r\n                }\r\n            }\r\n        }\r\n\r\n        function getItems() {\r\n            return items;\r\n        }\r\n\r\n        function getIdPropertyName() {\r\n            return idProperty;\r\n        }\r\n\r\n        function setItems(data: any[], newIdProperty?: string | boolean) {\r\n            if (newIdProperty != null && typeof newIdProperty == \"string\")\r\n                idProperty = newIdProperty;\r\n\r\n            items = filteredItems = data;\r\n            if (localSort) {\r\n                items.sort(getSortComparer());\r\n            }\r\n\r\n            idxById = {};\r\n            rowsById = null;\r\n            summaryOptions.totals = {};\r\n            updateIdxById();\r\n            ensureIdUniqueness();\r\n\r\n            if (suspend) {\r\n                recalc(items);\r\n            }\r\n            else {\r\n                refresh();\r\n            }\r\n\r\n            onDataChanged.notify({ dataView: self }, null, self);\r\n        }\r\n\r\n        function setPagingOptions(args: any) {\r\n            var anyChange = false;\r\n\r\n            if (args.rowsPerPage != undefined &&\r\n                intf.rowsPerPage != args.rowsPerPage) {\r\n                intf.rowsPerPage = args.rowsPerPage;\r\n                anyChange = true;\r\n            }\r\n\r\n            if (args.page != undefined) {\r\n                var newPage: number;\r\n                if (!intf.rowsPerPage)\r\n                    newPage = 1;\r\n                else if (totalCount == null)\r\n                    newPage = args.page;\r\n                else\r\n                    newPage = Math.min(args.page, Math.ceil(totalCount / intf.rowsPerPage) + 1);\r\n\r\n                if (newPage < 1)\r\n                    newPage = 1;\r\n\r\n                if (newPage != page) {\r\n                    intf.seekToPage = newPage;\r\n                    anyChange = true;\r\n                }\r\n            }\r\n\r\n            if (anyChange)\r\n                populate();\r\n        }\r\n\r\n        function getPagingInfo(): PagingInfo {\r\n            return {\r\n                rowsPerPage: intf.rowsPerPage,\r\n                page: page,\r\n                totalCount: totalCount,\r\n                loading: loading,\r\n                error: errorMessage,\r\n                dataView: intf\r\n            };\r\n        }\r\n\r\n        function getSortComparer() {\r\n            if (sortComparer != null)\r\n                return sortComparer;\r\n\r\n            var cols: string[] = [];\r\n            var asc: boolean[] = [];\r\n            var sorts = intf.sortBy || [];\r\n            for (var s of sorts) {\r\n                if (s == null)\r\n                    continue;\r\n                if (s.length > 5 && s.toLowerCase().substr(s.length - 5).toLowerCase() == ' desc') {\r\n                    asc.push(false);\r\n                    cols.push(s.substr(0, s.length - 5));\r\n                }\r\n                else {\r\n                    asc.push(true);\r\n                    cols.push(s);\r\n                }\r\n            }\r\n            return function (a: any, b: any) {\r\n                for (var i = 0, l = cols.length; i < l; i++) {\r\n                    var field = cols[i];\r\n                    var sign = asc[i] ? 1 : -1;\r\n                    var value1 = a[field], value2 = b[field];\r\n                    var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;\r\n                    if (result != 0) {\r\n                        return result;\r\n                    }\r\n                }\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        function sort(comparer?: (a: any, b: any) => number, ascending?: boolean) {\r\n            sortAsc = ascending;\r\n            fastSortField = null;\r\n            if (ascending === false) {\r\n                items.reverse();\r\n            }\r\n\r\n            sortComparer = comparer;\r\n            items.sort(getSortComparer());\r\n\r\n            if (ascending === false) {\r\n                items.reverse();\r\n            }\r\n            idxById = {};\r\n            updateIdxById();\r\n            refresh();\r\n        }\r\n\r\n        function getLocalSort(): boolean {\r\n            return localSort;\r\n        }\r\n\r\n        function setLocalSort(value: boolean) {\r\n            if (localSort != value) {\r\n                localSort = value;\r\n                sort();\r\n            }\r\n        }\r\n\r\n        /***\r\n         * Provides a workaround for the extremely slow sorting in IE.\r\n         * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\r\n         * to return the value of that field and then doing a native Array.sort().\r\n         */\r\n        function fastSort(field: any, ascending: boolean) {\r\n            sortAsc = ascending;\r\n            fastSortField = field;\r\n            sortComparer = null;\r\n            var oldToString = Object.prototype.toString;\r\n            Object.prototype.toString = (typeof field === \"function\") ? field : function () {\r\n                return this[field]\r\n            };\r\n            // an extra reversal for descending sort keeps the sort stable\r\n            // (assuming a stable native sort implementation, which isn't true in some cases)\r\n            if (ascending === false) {\r\n                items.reverse();\r\n            }\r\n            items.sort();\r\n            Object.prototype.toString = oldToString;\r\n            if (ascending === false) {\r\n                items.reverse();\r\n            }\r\n            idxById = {};\r\n            updateIdxById();\r\n            refresh();\r\n        }\r\n\r\n        function reSort() {\r\n            if (fastSortField)\r\n                fastSort(fastSortField, sortAsc);\r\n            else\r\n                sort(sortComparer, sortAsc);\r\n        }\r\n\r\n        function getFilteredItems() {\r\n            return filteredItems;\r\n        }\r\n\r\n        function getFilter() {\r\n            return filter;\r\n        }\r\n\r\n        function setFilter(filterFn: any) {\r\n            filter = filterFn;\r\n            if (options.inlineFilters) {\r\n                compiledFilter = compileFilter();\r\n                compiledFilterWithCaching = compileFilterWithCaching();\r\n            }\r\n            refresh();\r\n        }\r\n\r\n        function getGrouping() {\r\n            return groupingInfos;\r\n        }\r\n\r\n        function setSummaryOptions(summary: any) {\r\n            summary = summary || {};\r\n            summaryOptions.aggregators = summary.aggregators || [];\r\n            summaryOptions.compiledAccumulators = [];\r\n            summaryOptions.totals = {};\r\n            var idx = summaryOptions.aggregators.length;\r\n            while (idx--) {\r\n                summaryOptions.compiledAccumulators[idx] = compileAccumulatorLoop(summaryOptions.aggregators[idx]);\r\n            }\r\n            setGrouping(groupingInfos || []);\r\n        }\r\n\r\n        function getGrandTotals() {\r\n            summaryOptions.totals = summaryOptions.totals || {};\r\n\r\n            if (!summaryOptions.totals.initialized) {\r\n                summaryOptions.aggregators = summaryOptions.aggregators || [];\r\n                summaryOptions.compiledAccumulators = summaryOptions.compiledAccumulators || [];\r\n                var agg: any, idx = summaryOptions.aggregators.length;\r\n\r\n                while (idx--) {\r\n                    agg = summaryOptions.aggregators[idx];\r\n                    agg.init();\r\n                    summaryOptions.compiledAccumulators[idx].call(agg, items);\r\n                    agg.storeResult(summaryOptions.totals);\r\n                }\r\n                summaryOptions.totals.initialized = true;\r\n            }\r\n\r\n            return summaryOptions.totals;\r\n        }\r\n\r\n        function setGrouping(groupingInfo: any) {\r\n            if (!options.groupItemMetadataProvider) {\r\n                options.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\r\n            }\r\n\r\n            groups = [];\r\n            toggledGroupsByLevel = [];\r\n            groupingInfo = groupingInfo || [];\r\n            groupingInfos = (groupingInfo instanceof Array) ? groupingInfo : [groupingInfo];\r\n\r\n            for (var i = 0; i < groupingInfos.length; i++) {\r\n                var gi = groupingInfos[i] = extend(extend<any>({}, groupingInfoDefaults), deepClone(groupingInfos[i]));\r\n                gi.aggregators = gi.aggregators || summaryOptions.aggregators || [];\r\n                gi.getterIsAFn = typeof gi.getter === \"function\";\r\n\r\n                // pre-compile accumulator loops\r\n                gi.compiledAccumulators = [];\r\n                var idx = gi.aggregators.length;\r\n                while (idx--) {\r\n                    gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);\r\n                }\r\n\r\n                toggledGroupsByLevel[i] = {};\r\n            }\r\n\r\n            refresh();\r\n        }\r\n\r\n        function getItemByIdx(i: number) {\r\n            return items[i];\r\n        }\r\n\r\n        function getIdxById(id: any) {\r\n            return idxById[id];\r\n        }\r\n\r\n        function ensureRowsByIdCache() {\r\n            if (!rowsById) {\r\n                rowsById = {};\r\n                for (var i = 0, l = rows.length; i < l; i++) {\r\n                    rowsById[rows[i][idProperty]] = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        function getRowByItem(item: any) {\r\n            ensureRowsByIdCache();\r\n            return rowsById[item[idProperty]];\r\n        }\r\n\r\n        function getRowById(id: any) {\r\n            ensureRowsByIdCache();\r\n            return rowsById[id];\r\n        }\r\n\r\n        function getItemById(id: any) {\r\n            return items[idxById[id]];\r\n        }\r\n\r\n        function mapItemsToRows(itemArray: any[]) {\r\n            var rows = [];\r\n            ensureRowsByIdCache();\r\n            for (var i = 0, l = itemArray.length; i < l; i++) {\r\n                var row = rowsById[itemArray[i][idProperty]];\r\n                if (row != null) {\r\n                    rows[rows.length] = row;\r\n                }\r\n            }\r\n            return rows;\r\n        }\r\n\r\n        function mapIdsToRows(idArray: any[]) {\r\n            var rows: any[] = [];\r\n            ensureRowsByIdCache();\r\n            for (var i = 0, l = idArray.length; i < l; i++) {\r\n                var row = rowsById[idArray[i]];\r\n                if (row != null) {\r\n                    rows[rows.length] = row;\r\n                }\r\n            }\r\n            return rows;\r\n        }\r\n\r\n        function mapRowsToIds(rowArray: any[]) {\r\n            var ids: any[] = [];\r\n            for (var i = 0, l = rowArray.length; i < l; i++) {\r\n                if (rowArray[i] < rows.length) {\r\n                    ids[ids.length] = rows[rowArray[i]][idProperty];\r\n                }\r\n            }\r\n            return ids;\r\n        }\r\n\r\n        function updateItem(id: any, item: any) {\r\n            if (idxById[id] === undefined) {\r\n                throw new Error(\"Invalid id\");\r\n            }\r\n\r\n            if (id !== item[idProperty]) {\r\n                // make sure the new id is unique:\r\n                var newId = item[idProperty];\r\n                if (newId == null) {\r\n                    throw new Error(\"Cannot update item to associate with a null id\");\r\n                }\r\n                if (idxById[newId] !== undefined) {\r\n                    throw new Error(\"Cannot update item to associate with a non-unique id\");\r\n                }\r\n                idxById[newId] = idxById[id];\r\n                delete idxById[id];\r\n\r\n                if (updated && updated[id]) {\r\n                    delete updated[id];\r\n                }\r\n\r\n                id = newId;\r\n            }\r\n            items[idxById[id]] = item;\r\n\r\n            if (!updated) {\r\n                updated = {};\r\n            }\r\n            updated[id] = true;\r\n            refresh();\r\n        }\r\n\r\n        function insertItem(insertBefore: number, item: any) {\r\n            items.splice(insertBefore, 0, item);\r\n            updateIdxById(insertBefore);\r\n            refresh();\r\n        }\r\n\r\n        function addItem(item: any) {\r\n            items.push(item);\r\n            updateIdxById(items.length - 1);\r\n            refresh();\r\n        }\r\n\r\n        function deleteItem(id: any) {\r\n            var idx = idxById[id];\r\n            if (idx === undefined) {\r\n                throw \"Invalid id\";\r\n            }\r\n            delete idxById[id];\r\n            items.splice(idx, 1);\r\n            updateIdxById(idx);\r\n            refresh();\r\n        }\r\n\r\n        function sortedAddItem(item: any) {\r\n            insertItem(sortedIndex(item), item);\r\n        }\r\n\r\n        function sortedUpdateItem(id: any, item: any) {\r\n            if (idxById[id] === undefined || id !== item[idProperty]) {\r\n                throw new Error(\"Invalid or non-matching id \" + idxById[id]);\r\n            }\r\n            var comparer = getSortComparer();\r\n            var oldItem = getItemById(id);\r\n            if (comparer(oldItem, item) !== 0) {\r\n                // item affects sorting -> must use sorted add\r\n                deleteItem(id);\r\n                sortedAddItem(item);\r\n            }\r\n            else { // update does not affect sorting -> regular update works fine\r\n                updateItem(id, item);\r\n            }\r\n        }\r\n\r\n        function sortedIndex(searchItem: any) {\r\n            var low = 0, high = items.length;\r\n            var comparer = getSortComparer();\r\n            while (low < high) {\r\n                var mid = low + high >>> 1;\r\n                if (comparer(items[mid], searchItem) === -1) {\r\n                    low = mid + 1;\r\n                }\r\n                else {\r\n                    high = mid;\r\n                }\r\n            }\r\n            return low;\r\n        }\r\n\r\n        function getRows() {\r\n            return rows;\r\n        }\r\n\r\n        function getLength() {\r\n            return rows.length;\r\n        }\r\n\r\n        function getItem(i: number) {\r\n            var item = rows[i];\r\n\r\n            // if this is a group row, make sure totals are calculated and update the title\r\n            if (item && item.__group && item.totals && !item.totals.initialized) {\r\n                var gi = groupingInfos[item.level];\r\n                if (!gi.displayTotalsRow) {\r\n                    calculateTotals(item.totals);\r\n                    item.title = gi.formatter ? gi.formatter(item) : item.value;\r\n                }\r\n            }\r\n            // if this is a totals row, make sure it's calculated\r\n            else if (item && item.__groupTotals && !item.initialized) {\r\n                calculateTotals(item);\r\n            }\r\n\r\n            return item;\r\n        }\r\n\r\n        function getItemMetadata(i: number) {\r\n            var item = rows[i];\r\n            if (item === undefined) {\r\n                return null;\r\n            }\r\n\r\n            // overrides for grouping rows\r\n            if (item.__group) {\r\n                return options.groupItemMetadataProvider.getGroupRowMetadata(item);\r\n            }\r\n\r\n            // overrides for totals rows\r\n            if (item.__groupTotals) {\r\n                return options.groupItemMetadataProvider.getTotalsRowMetadata(item);\r\n            }\r\n\r\n            return (options.getItemMetadata && options.getItemMetadata(item, i)) || null;\r\n        }\r\n\r\n        function expandCollapseAllGroups(level: number, collapse: boolean) {\r\n            if (level == null) {\r\n                for (var i = 0; i < groupingInfos.length; i++) {\r\n                    toggledGroupsByLevel[i] = {};\r\n                    groupingInfos[i].collapsed = collapse;\r\n\r\n                    if (collapse === true) {\r\n                        onGroupCollapsed.notify({ level: i, groupingKey: null });\r\n                    } else {\r\n                        onGroupExpanded.notify({ level: i, groupingKey: null });\r\n                    }\r\n                }\r\n            } else {\r\n                toggledGroupsByLevel[level] = {};\r\n                groupingInfos[level].collapsed = collapse;\r\n\r\n                if (collapse === true) {\r\n                    onGroupCollapsed.notify({ level: level, groupingKey: null });\r\n                } else {\r\n                    onGroupExpanded.notify({ level: level, groupingKey: null });\r\n                }\r\n            }\r\n            refresh();\r\n        }\r\n\r\n        /**\r\n         * @param level {Number} Optional level to collapse.  If not specified, applies to all levels.\r\n         */\r\n        function collapseAllGroups(level: number) {\r\n            expandCollapseAllGroups(level, true);\r\n        }\r\n\r\n        /**\r\n         * @param level {Number} Optional level to expand.  If not specified, applies to all levels.\r\n         */\r\n        function expandAllGroups(level: number) {\r\n            expandCollapseAllGroups(level, false);\r\n        }\r\n\r\n        function resolveLevelAndGroupingKey(args: any) {\r\n            var arg0 = args[0];\r\n            if (args.length === 1 && arg0.indexOf(groupingDelimiter) !== -1) {\r\n                return { level: arg0.split(groupingDelimiter).length - 1, groupingKey: arg0 };\r\n            } else {\r\n                return { level: args.length - 1, groupingKey: args.join(groupingDelimiter) };\r\n            }\r\n        }\r\n\r\n        function expandCollapseGroup(args: any, collapse: any) {\r\n            var opts = resolveLevelAndGroupingKey(args);\r\n            toggledGroupsByLevel[opts.level][opts.groupingKey] = groupingInfos[opts.level].collapsed ^ collapse;\r\n            if (collapse)\r\n                onGroupCollapsed.notify({ level: opts.level, groupingKey: opts.groupingKey });\r\n            else\r\n                onGroupExpanded.notify({ level: opts.level, groupingKey: opts.groupingKey });\r\n\r\n            refresh();\r\n        }\r\n\r\n        /**\r\n         * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n         *     variable argument list of grouping values denoting a unique path to the row.  For\r\n         *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\r\n         *     the 'high' group.\r\n         */\r\n        function collapseGroup(varArgs: any[]) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            expandCollapseGroup(args, true);\r\n        }\r\n\r\n        /**\r\n         * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n         *     variable argument list of grouping values denoting a unique path to the row.  For\r\n         *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\r\n         *     the 'high' group.\r\n         */\r\n        function expandGroup(varArgs: any[]) {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            expandCollapseGroup(args, false);\r\n        }\r\n\r\n        function getGroups() {\r\n            return groups;\r\n        }\r\n\r\n        function getOrCreateGroup(groupsByVal: any, val: any, level: number, parentGroup: any, groups: any[]) {\r\n            var group = groupsByVal[val];\r\n\r\n            if (!group) {\r\n                group = new Group<any>();\r\n                group.value = val;\r\n                group.level = level;\r\n                group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\r\n                groups[groups.length] = group;\r\n                groupsByVal[val] = group;\r\n            }\r\n\r\n            return group;\r\n        }\r\n\r\n        function extractGroups(rows: any[], parentGroup?: any) {\r\n            var group: any;\r\n            var val: any;\r\n            var groups: any[] = [];\r\n            var groupsByVal = {};\r\n            var r: any;\r\n            var level = parentGroup ? parentGroup.level + 1 : 0;\r\n            var gi = groupingInfos[level];\r\n\r\n            for (var i = 0, l: number = gi.predefinedValues.length; i < l; i++) {\r\n                val = gi.predefinedValues[i];\r\n                group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups);\r\n            }\r\n\r\n            for (var i = 0, l = rows.length; i < l; i++) {\r\n                r = rows[i];\r\n                val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];\r\n                group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups);\r\n\r\n                group.rows[group.count++] = r;\r\n            }\r\n\r\n            if (level < groupingInfos.length - 1) {\r\n                for (var i = 0; i < groups.length; i++) {\r\n                    group = groups[i];\r\n                    group.groups = extractGroups(group.rows, group);\r\n                }\r\n            }\r\n\r\n            if (groups.length) {\r\n                addTotals(groups, level);\r\n            }\r\n\r\n            groups.sort(groupingInfos[level].comparer);\r\n\r\n            return groups;\r\n        }\r\n\r\n        function calculateTotals(totals: any) {\r\n            var group = totals.group;\r\n            var gi = groupingInfos[group.level];\r\n            var isLeafLevel = (group.level == groupingInfos.length);\r\n            var agg: any, idx = gi.aggregators.length;\r\n\r\n            if (!isLeafLevel && gi.aggregateChildGroups) {\r\n                // make sure all the subgroups are calculated\r\n                var i = group.groups.length;\r\n                while (i--) {\r\n                    if (!group.groups[i].totals.initialized) {\r\n                        calculateTotals(group.groups[i].totals);\r\n                    }\r\n                }\r\n            }\r\n\r\n            while (idx--) {\r\n                agg = gi.aggregators[idx];\r\n                agg.init();\r\n                if (!isLeafLevel && gi.aggregateChildGroups) {\r\n                    gi.compiledAccumulators[idx].call(agg, group.groups);\r\n                } else {\r\n                    gi.compiledAccumulators[idx].call(agg, group.rows);\r\n                }\r\n                agg.storeResult(totals);\r\n            }\r\n            totals.initialized = true;\r\n        }\r\n\r\n        function addGroupTotals(group: any) {\r\n            var gi = groupingInfos[group.level];\r\n            var totals = new GroupTotals<TEntity>();\r\n            totals.group = group;\r\n            group.totals = totals;\r\n            if (!gi.lazyTotalsCalculation) {\r\n                calculateTotals(totals);\r\n            }\r\n        }\r\n\r\n        function addTotals(groups: any[], level?: number) {\r\n            level = level || 0;\r\n            var gi = groupingInfos[level];\r\n            var groupCollapsed = gi.collapsed;\r\n            var toggledGroups = toggledGroupsByLevel[level];\r\n            var idx = groups.length, g: any;\r\n            while (idx--) {\r\n                g = groups[idx];\r\n\r\n                if (g.collapsed && !gi.aggregateCollapsed) {\r\n                    continue;\r\n                }\r\n\r\n                // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\r\n                if (g.groups) {\r\n                    addTotals(g.groups, level + 1);\r\n                }\r\n\r\n                if (gi.aggregators.length && (\r\n                    gi.aggregateEmpty || g.rows.length || (g.groups && g.groups.length))) {\r\n                    addGroupTotals(g);\r\n                }\r\n\r\n                g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];\r\n                g.title = gi.formatter ? gi.formatter(g) : g.value;\r\n            }\r\n        }\r\n\r\n        function flattenGroupedRows(groups: any[], level?: number) {\r\n            level = level || 0;\r\n            var gi = groupingInfos[level];\r\n            var groupedRows: any[] = [], rows: any[], gl = 0, g: any;\r\n            for (var i = 0, l = groups.length; i < l; i++) {\r\n                g = groups[i];\r\n                groupedRows[gl++] = g;\r\n\r\n                if (!g.collapsed) {\r\n                    rows = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;\r\n                    for (var j = 0, jj = rows.length; j < jj; j++) {\r\n                        groupedRows[gl++] = rows[j];\r\n                    }\r\n                }\r\n\r\n                if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\r\n                    groupedRows[gl++] = g.totals;\r\n                }\r\n            }\r\n            return groupedRows;\r\n        }\r\n\r\n        function getFunctionInfo(fn: any) {\r\n            var fnRegex = /^function[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/;\r\n            var matches = fn.toString().match(fnRegex);\r\n            return {\r\n                params: matches[1].split(\",\"),\r\n                body: matches[2]\r\n            };\r\n        }\r\n\r\n        function compileAccumulatorLoop(aggregator: any) {\r\n            var accumulatorInfo = getFunctionInfo(aggregator.accumulate);\r\n            var fn: any = new Function(\r\n                \"_items\",\r\n                \"for (var \" + accumulatorInfo.params[0] + \", _i=0, _il=_items.length; _i<_il; _i++) {\" +\r\n                accumulatorInfo.params[0] + \" = _items[_i]; \" +\r\n                accumulatorInfo.body +\r\n                \"}\"\r\n            );\r\n            return fn;\r\n        }\r\n\r\n        function compileFilter() {\r\n            var filterInfo = getFunctionInfo(filter);\r\n\r\n            var filterBody = filterInfo.body\r\n                .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\r\n                .replace(/return true\\s*([;}]|$)/gi, \"{ _retval[_idx++] = $item$; continue _coreloop; }$1\")\r\n                .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\r\n                \"{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\r\n\r\n            // This preserves the function template code after JS compression,\r\n            // so that replace() commands still work as expected.\r\n            var tpl = [\r\n                //\"function(_items, _args) { \",\r\n                \"var _retval = [], _idx = 0; \",\r\n                \"var $item$, $args$ = _args; \",\r\n                \"_coreloop: \",\r\n                \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\r\n                \"$item$ = _items[_i]; \",\r\n                \"$filter$; \",\r\n                \"} \",\r\n                \"return _retval; \"\r\n                //\"}\"\r\n            ].join(\"\");\r\n            tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\r\n            tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\r\n            tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\r\n\r\n            var fn: any = new Function(\"_items,_args\", tpl);\r\n            fn.displayName = fn.name = \"compiledFilter\";\r\n            return fn;\r\n        }\r\n\r\n        function compileFilterWithCaching() {\r\n            var filterInfo = getFunctionInfo(filter);\r\n\r\n            var filterBody = filterInfo.body\r\n                .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\r\n                .replace(/return true\\s*([;}]|$)/gi, \"{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1\")\r\n                .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\r\n                \"{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\r\n\r\n            // This preserves the function template code after JS compression,\r\n            // so that replace() commands still work as expected.\r\n            var tpl = [\r\n                //\"function(_items, _args, _cache) { \",\r\n                \"var _retval = [], _idx = 0; \",\r\n                \"var $item$, $args$ = _args; \",\r\n                \"_coreloop: \",\r\n                \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\r\n                \"$item$ = _items[_i]; \",\r\n                \"if (_cache[_i]) { \",\r\n                \"_retval[_idx++] = $item$; \",\r\n                \"continue _coreloop; \",\r\n                \"} \",\r\n                \"$filter$; \",\r\n                \"} \",\r\n                \"return _retval; \"\r\n                //\"}\"\r\n            ].join(\"\");\r\n            tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\r\n            tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\r\n            tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\r\n\r\n            var fn: any = new Function(\"_items,_args,_cache\", tpl);\r\n            var fnName = \"compiledFilterWithCaching\";\r\n            fn.displayName = fnName;\r\n            fn.name = setFunctionName(fn, fnName);\r\n            return fn;\r\n        }\r\n\r\n        /**\r\n         * In ES5 we could set the function name on the fly but in ES6 this is forbidden and we need to set it through differently\r\n         * We can use Object.defineProperty and set it the property to writable, see MDN for reference\r\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\r\n         * @param {string} fn\r\n         * @param {string} fnName\r\n         */\r\n        function setFunctionName(fn: Function, fnName: string) {\r\n            try {\r\n                Object.defineProperty(fn, 'name', {\r\n                    writable: true,\r\n                    value: fnName\r\n                });\r\n            } catch (err) {\r\n                (fn as any).name = fnName;\r\n            }\r\n        }\r\n\r\n        function uncompiledFilter(items: any[], args: any) {\r\n            var retval: any[] = [], idx = 0;\r\n\r\n            for (var i = 0, ii = items.length; i < ii; i++) {\r\n                if (filter(items[i], args)) {\r\n                    retval[idx++] = items[i];\r\n                }\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        function uncompiledFilterWithCaching(items: any[], args: any, cache: any) {\r\n            var retval: any[] = [], idx = 0, item: any;\r\n\r\n            for (var i = 0, ii = items.length; i < ii; i++) {\r\n                item = items[i];\r\n                if (cache[i]) {\r\n                    retval[idx++] = item;\r\n                } else if (filter(item, args)) {\r\n                    retval[idx++] = item;\r\n                    cache[i] = true;\r\n                }\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        function getFilteredAndPagedItems(items: any[]) {\r\n            if (filter) {\r\n                var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;\r\n                var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;\r\n\r\n                if (refreshHints.isFilterNarrowing) {\r\n                    filteredItems = batchFilter(filteredItems, filterArgs);\r\n                } else if (refreshHints.isFilterExpanding) {\r\n                    filteredItems = batchFilterWithCaching(items, filterArgs, filterCache);\r\n                } else if (!refreshHints.isFilterUnchanged) {\r\n                    filteredItems = batchFilter(items, filterArgs);\r\n                }\r\n            } else {\r\n                // special case:  if not filtering and not paging, the resulting\r\n                // rows collection needs to be a copy so that changes due to sort\r\n                // can be caught\r\n                filteredItems = items.concat();\r\n            }\r\n\r\n            // get the current page\r\n            return { totalRows: filteredItems.length, rows: filteredItems };\r\n        }\r\n\r\n        function getRowDiffs(rows: any[], newRows: any[]) {\r\n            var item: any, r: any, eitherIsNonData: boolean, diff: any[] = [];\r\n            var from = 0, to = newRows.length;\r\n\r\n            if (refreshHints && refreshHints.ignoreDiffsBefore) {\r\n                from = Math.max(0,\r\n                    Math.min(newRows.length, refreshHints.ignoreDiffsBefore));\r\n            }\r\n\r\n            if (refreshHints && refreshHints.ignoreDiffsAfter) {\r\n                to = Math.min(newRows.length,\r\n                    Math.max(0, refreshHints.ignoreDiffsAfter));\r\n            }\r\n\r\n            for (var i = from, rl = rows.length; i < to; i++) {\r\n                if (i >= rl) {\r\n                    diff[diff.length] = i;\r\n                } else {\r\n                    item = newRows[i];\r\n                    r = rows[i];\r\n\r\n                    if ((groupingInfos.length && (eitherIsNonData = (item.__nonDataRow) || (r.__nonDataRow)) &&\r\n                        item.__group !== r.__group ||\r\n                        item.__group && !item.equals(r))\r\n                        || (eitherIsNonData &&\r\n                            // no good way to compare totals since they are arbitrary DTOs\r\n                            // deep object comparison is pretty expensive\r\n                            // always considering them 'dirty' seems easier for the time being\r\n                            (item.__groupTotals || r.__groupTotals))\r\n                        || item[idProperty] != r[idProperty]\r\n                        || (updated && updated[item[idProperty]])\r\n                    ) {\r\n                        diff[diff.length] = i;\r\n                    }\r\n                }\r\n            }\r\n            return diff;\r\n        }\r\n\r\n        function recalc(_items: any[]) {\r\n            rowsById = null;\r\n\r\n            if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing ||\r\n                refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {\r\n                filterCache = [];\r\n            }\r\n\r\n            var filteredItems = getFilteredAndPagedItems(_items);\r\n            totalRows = filteredItems.totalRows;\r\n            var newRows = filteredItems.rows;\r\n\r\n            summaryOptions.totals = {};\r\n\r\n            groups = [];\r\n            if (groupingInfos.length) {\r\n                groups = extractGroups(newRows);\r\n                if (groups.length) {\r\n                    newRows = flattenGroupedRows(groups);\r\n                }\r\n            }\r\n\r\n            var diff = getRowDiffs(rows, newRows);\r\n\r\n            rows = newRows;\r\n\r\n            return diff;\r\n        }\r\n\r\n        function refresh() {\r\n            if (suspend) {\r\n                return;\r\n            }\r\n\r\n            var countBefore = rows.length;\r\n            var totalRowsBefore = totalRows;\r\n\r\n            var diff = recalc(items); // pass as direct refs to avoid closure perf hit\r\n\r\n            updated = null;\r\n            prevRefreshHints = refreshHints;\r\n            refreshHints = {};\r\n\r\n            if (totalRowsBefore !== totalRows) {\r\n                onPagingInfoChanged.notify(getPagingInfo(), null, self);\r\n            }\r\n            if (countBefore !== rows.length) {\r\n                onRowCountChanged.notify({ previous: countBefore, current: rows.length, dataView: self }, null, self);\r\n            }\r\n            if (diff.length > 0) {\r\n                onRowsChanged.notify({ rows: diff, dataView: self }, null, self);\r\n            }\r\n            if (countBefore !== rows.length || diff.length > 0) {\r\n                onRowsOrCountChanged.notify({\r\n                    rowsDiff: diff, previousRowCount: countBefore, currentRowCount: rows.length,\r\n                    rowCountChanged: countBefore !== rows.length, rowsChanged: diff.length > 0, dataView: self\r\n                }, null, self);\r\n            }\r\n        }\r\n\r\n        /***\r\n         * Wires the grid and the DataView together to keep row selection tied to item ids.\r\n         * This is useful since, without it, the grid only knows about rows, so if the items\r\n         * move around, the same rows stay selected instead of the selection moving along\r\n         * with the items.\r\n         *\r\n         * NOTE:  This doesn't work with cell selection model.\r\n         *\r\n         * @param grid {Slick.Grid} The grid to sync selection with.\r\n         * @param preserveHidden {Boolean} Whether to keep selected items that go out of the\r\n         *     view due to them getting filtered out.\r\n         * @param preserveHiddenOnSelectionChange {Boolean} Whether to keep selected items\r\n         *     that are currently out of the view (see preserveHidden) as selected when selection\r\n         *     changes.\r\n         * @return {Event} An event that notifies when an internal list of selected row ids\r\n         *     changes.  This is useful since, in combination with the above two options, it allows\r\n         *     access to the full list selected row ids, and not just the ones visible to the grid.\r\n         * @method syncGridSelection\r\n         */\r\n        function syncGridSelection(grid: any, preserveHidden: boolean, preserveHiddenOnSelectionChange: boolean) {\r\n            var self = this;\r\n            var inHandler: any;\r\n            var selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\r\n            var onSelectedRowIdsChanged = new Event();\r\n\r\n            function setSelectedRowIds(rowIds: any[]) {\r\n                if (selectedRowIds.join(\",\") == rowIds.join(\",\")) {\r\n                    return;\r\n                }\r\n\r\n                selectedRowIds = rowIds;\r\n\r\n                onSelectedRowIdsChanged.notify({\r\n                    \"grid\": grid,\r\n                    \"ids\": selectedRowIds,\r\n                    \"dataView\": self\r\n                }, new EventData(), self);\r\n            }\r\n\r\n            function update() {\r\n                if (selectedRowIds.length > 0) {\r\n                    inHandler = true;\r\n                    var selectedRows = self.mapIdsToRows(selectedRowIds);\r\n                    if (!preserveHidden) {\r\n                        setSelectedRowIds(self.mapRowsToIds(selectedRows));\r\n                    }\r\n                    grid.setSelectedRows(selectedRows);\r\n                    inHandler = false;\r\n                }\r\n            }\r\n\r\n            grid.onSelectedRowsChanged.subscribe(function (e: any, args: any) {\r\n                if (inHandler) { return; }\r\n                var newSelectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\r\n                if (!preserveHiddenOnSelectionChange || !grid.getOptions().multiSelect) {\r\n                    setSelectedRowIds(newSelectedRowIds);\r\n                } else {\r\n                    // keep the ones that are hidden\r\n                    var existing = $.grep(selectedRowIds, function (id) { return self.getRowById(id) === undefined; });\r\n                    // add the newly selected ones\r\n                    setSelectedRowIds(existing.concat(newSelectedRowIds));\r\n                }\r\n            });\r\n\r\n            this.onRowsChanged.subscribe(update);\r\n            this.onRowCountChanged.subscribe(update);\r\n\r\n            return onSelectedRowIdsChanged;\r\n        }\r\n\r\n        function syncGridCellCssStyles(grid: Grid, key: string) {\r\n            var hashById: any;\r\n            var inHandler: any;\r\n\r\n            // since this method can be called after the cell styles have been set,\r\n            // get the existing ones right away\r\n            storeCellCssStyles(grid.getCellCssStyles(key));\r\n\r\n            function storeCellCssStyles(hash: any) {\r\n                hashById = {};\r\n                for (var row in hash) {\r\n                    var id: any = rows[row][idProperty];\r\n                    hashById[id] = hash[row];\r\n                }   \r\n            }\r\n\r\n            function update() {\r\n                if (hashById) {\r\n                    inHandler = true;\r\n                    ensureRowsByIdCache();\r\n                    var newHash = {};\r\n                    for (var id in hashById) {\r\n                        var row = rowsById[id];\r\n                        if (row != undefined) {\r\n                            newHash[row] = hashById[id];\r\n                        }\r\n                    }\r\n                    grid.setCellCssStyles(key, newHash);\r\n                    inHandler = false;\r\n                }\r\n            }\r\n\r\n            var subFunc = function (e: any, args: any) {\r\n                if (inHandler) { return; }\r\n                if (key != args.key) { return; }\r\n                if (args.hash) {\r\n                    storeCellCssStyles(args.hash);\r\n                }\r\n                else {\r\n                    grid.onCellCssStylesChanged.unsubscribe(subFunc);\r\n                    onRowsOrCountChanged.unsubscribe(update);\r\n                }\r\n            };\r\n\r\n            grid.onCellCssStylesChanged.subscribe(subFunc);\r\n            onRowsOrCountChanged.subscribe(update);\r\n        }\r\n\r\n        function addData(data: any) {\r\n\r\n            if (intf.onProcessData && data)\r\n                data = intf.onProcessData(data, intf) || data;\r\n\r\n            errorMessage = null;\r\n            loading && loading.abort();\r\n            loading = false;\r\n\r\n            if (!data) {\r\n                errorMessage = intf.errormsg;\r\n                onPagingInfoChanged.notify(getPagingInfo());\r\n                return false;\r\n            }\r\n\r\n            data.TotalCount = data.TotalCount || 0;\r\n            data.Entities = data.Entities || [];\r\n\r\n            if (!data.Skip || (!intf.rowsPerPage && !data.Take))\r\n                data.Page = 1;\r\n            else\r\n                data.Page = Math.ceil(data.Skip / (data.Take || intf.rowsPerPage)) + 1;\r\n\r\n            page = data.Page;\r\n            totalCount = data.TotalCount;\r\n\r\n            setItems(data.Entities);\r\n\r\n            onPagingInfoChanged.notify(getPagingInfo());\r\n        }\r\n\r\n        function populate() {\r\n            if (populateLocks > 0) {\r\n                populateCalls++;\r\n                return;\r\n            }\r\n\r\n            populateCalls = 0;\r\n\r\n            loading && loading.abort();\r\n\r\n            if (intf.onSubmit) {\r\n                var gh = intf.onSubmit(intf);\r\n                if (gh === false)\r\n                    return false;\r\n            }\r\n\r\n            onDataLoading.notify(this);\r\n\r\n            if (!intf.url)\r\n                return false;\r\n\r\n            // set loading event\r\n        \r\n            if (!intf.seekToPage)\r\n                intf.seekToPage = 1;\r\n\r\n            var request: ListRequest = {};\r\n\r\n            var skip = (intf.seekToPage - 1) * intf.rowsPerPage;\r\n            if (skip)\r\n                request.Skip = skip;\r\n            if (intf.rowsPerPage)\r\n                request.Take = intf.rowsPerPage;\r\n\r\n            if (intf.sortBy && intf.sortBy.length) {\r\n                if (typeof intf.sortBy !== \"string\")\r\n                    request.Sort = intf.sortBy;\r\n                else {\r\n                    request.Sort = [intf.sortBy];\r\n                }\r\n            }\r\n\r\n            if (intf.params) {\r\n                request = extend(request, intf.params);\r\n            }\r\n\r\n            var dt = dataType;\r\n\r\n            var ajaxOptions = {\r\n                cache: false,\r\n                type: intf.method,\r\n                contentType: contentType,\r\n                url: intf.url,\r\n                data: request,\r\n                dataType: dt,\r\n                success: function (response: ServiceResponse) {\r\n                    loading = false;\r\n                    if (response.Error)\r\n                        notifyError(response.Error.Message || response.Error.Code);\r\n                    else\r\n                        addData(response);\r\n                    onDataLoaded.notify(this);\r\n                },\r\n                error: function (xhr: any, status: any, ev: any) {\r\n                    loading = false;\r\n\r\n                    if ((xhr.getResponseHeader(\"content-type\") || '').toLowerCase().indexOf(\"application/json\") >= 0) {\r\n                        var json = $.parseJSON(xhr.responseText);\r\n                        if (json != null && json.Error != null) {\r\n                            notifyError(json.Error.Message || json.Error.Code);\r\n                            onPagingInfoChanged.notify(getPagingInfo());\r\n                            onDataLoaded.notify(this);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    errorMessage = xhr.errormsg;\r\n                    onPagingInfoChanged.notify(getPagingInfo());\r\n                    onDataLoaded.notify(this);\r\n                },\r\n                complete: function () {\r\n                    loading = false;\r\n                }\r\n            }\r\n\r\n            if (intf.onAjaxCall) {\r\n                var ah = intf.onAjaxCall(this, ajaxOptions);\r\n                if (ah === false) {\r\n                    loading = false;\r\n                    onPagingInfoChanged.notify(getPagingInfo());\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            ajaxOptions.data = (<any>$).toJSON(ajaxOptions.data);\r\n\r\n            onPagingInfoChanged.notify(getPagingInfo());\r\n            loading = $.ajax(ajaxOptions);\r\n        }\r\n\r\n        function populateLock() {\r\n            if (populateLocks == 0)\r\n                populateCalls = 0;\r\n            populateLocks++;\r\n        }\r\n\r\n        function populateUnlock() {\r\n            if (populateLocks > 0) {\r\n                populateLocks--;\r\n                if (populateLocks == 0 && populateCalls > 0)\r\n                    populate();\r\n            }\r\n        }\r\n        idProperty = options.idField || 'id';\r\n        contentType = options.contentType || \"application/json\";\r\n        dataType = options.dataType || 'json';\r\n        filter = options.filter || null;\r\n\r\n        intf = {\r\n            // methods\r\n            beginUpdate: beginUpdate,\r\n            endUpdate: endUpdate,\r\n            setPagingOptions: setPagingOptions,\r\n            getPagingInfo: getPagingInfo,\r\n            getIdPropertyName: getIdPropertyName,\r\n            getRows: getRows,\r\n            getItems: getItems,\r\n            setItems: setItems,\r\n            getFilter: getFilter,\r\n            getFilteredItems: getFilteredItems,\r\n            setFilter: setFilter,\r\n            sort: sort,\r\n            fastSort: fastSort,\r\n            reSort: reSort,\r\n            getLocalSort: getLocalSort,\r\n            setLocalSort: setLocalSort,\r\n            setSummaryOptions: setSummaryOptions,\r\n            getGrandTotals: getGrandTotals,\r\n            setGrouping: setGrouping,\r\n            getGrouping: getGrouping,\r\n            collapseAllGroups: collapseAllGroups,\r\n            expandAllGroups: expandAllGroups,\r\n            collapseGroup: collapseGroup,\r\n            expandGroup: expandGroup,\r\n            getGroups: getGroups,\r\n            getIdxById: getIdxById,\r\n            getRowByItem: getRowByItem,\r\n            getRowById: getRowById,\r\n            getItemById: getItemById,\r\n            getItemByIdx: getItemByIdx,\r\n            mapItemsToRows: mapItemsToRows,\r\n            mapRowsToIds: mapRowsToIds,\r\n            mapIdsToRows: mapIdsToRows,\r\n            setRefreshHints: setRefreshHints,\r\n            setFilterArgs: setFilterArgs,\r\n            refresh: refresh,\r\n            updateItem: updateItem,\r\n            insertItem: insertItem,\r\n            addItem: addItem,\r\n            deleteItem: deleteItem,\r\n            sortedAddItem: sortedAddItem,\r\n            sortedUpdateItem: sortedUpdateItem,\r\n            syncGridSelection: syncGridSelection,\r\n            syncGridCellCssStyles: syncGridCellCssStyles,\r\n\r\n            getLength: getLength,\r\n            getItem: getItem,\r\n            getItemMetadata: getItemMetadata,\r\n\r\n            onRowCountChanged: onRowCountChanged,\r\n            onRowsChanged: onRowsChanged,\r\n            onRowsOrCountChanged: onRowsOrCountChanged,\r\n            onPagingInfoChanged: onPagingInfoChanged,\r\n            onGroupExpanded: onGroupExpanded,\r\n            onGroupCollapsed: onGroupCollapsed,\r\n\r\n            addData: addData,\r\n            populate: populate,\r\n            populateLock: populateLock,\r\n            populateUnlock: populateUnlock,\r\n            onDataChanged: onDataChanged,\r\n            onDataLoaded: onDataLoaded,\r\n            onDataLoading: onDataLoading,\r\n            params: options.params || {},\r\n            onSubmit: options.onSubmit || null,\r\n            url: options.url || null,\r\n            rowsPerPage: options.rowsPerPage || 0,\r\n            seekToPage: options.seekToPage || 1,\r\n            onAjaxCall: options.onAjaxCall || null,\r\n            onProcessData: options.onProcessData || null,\r\n            method: options.method || \"POST\",\r\n            errormsg: text(\"Controls.Pager.DefaultLoadError\"),\r\n            sortBy: typeof options.sortBy == \"string\" ? [options.sortBy] : (options.sortBy || []),\r\n            idField: idProperty\r\n        };\r\n\r\n        if (options.url && options.autoLoad) {\r\n            populate();\r\n        }\r\n\r\n        return intf;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["escape", "NonDataRow", "convertCompatFormatter", "formatNumber", "htmlEncode", "tryGetText", "Aggregators", "Avg", "field", "item", "val", "groupTotals", "WeightedAvg", "weightedField", "valWeighted", "Min", "Max", "Sum", "AggregateFormatting", "formatMarkup", "totals", "column", "aggType", "textKey", "text", "tryGetText", "value", "formattedValue", "formatValue", "_a", "_b", "_c", "formatter", "convertCompatFormatter", "NonDataRow", "escape", "e", "displayFormat", "htmlEncode", "formatNumber", "groupTotalsFormatter", "deepClone", "extend", "notifyError", "text", "Event", "EventData", "gridDefaults", "Group", "GroupTotals", "RemoteView", "options", "_a", "self", "gridDefaults", "AggregateFormatting", "idProperty", "items", "rows", "idxById", "rowsById", "filter", "updated", "suspend", "sortAsc", "fastSortField", "sortComparer", "refreshHints", "prevRefreshHints", "filterArgs", "filteredItems", "compiledFilter", "compiledFilterWithCaching", "filterCache", "groupingInfoDefaults", "a", "b", "summaryOptions", "groupingInfos", "groups", "toggledGroupsByLevel", "groupingDelimiter", "page", "totalRows", "onDataChanged", "Event", "onDataLoading", "onDataLoaded", "onGroupExpanded", "onGroupCollapsed", "onPagingInfoChanged", "onRowCountChanged", "onRowsChanged", "onRowsOrCountChanged", "loading", "errorMessage", "populateLocks", "populateCalls", "contentType", "dataType", "totalCount", "localSort", "intf", "beginUpdate", "endUpdate", "refresh", "setRefreshHints", "hints", "setFilterArgs", "args", "updateIdxById", "startingIndex", "id", "i", "l", "msg", "ensureIdUniqueness", "getItems", "getIdPropertyName", "setItems", "data", "newIdProperty", "getSortComparer", "recalc", "setPagingOptions", "anyChange", "newPage", "populate", "getPagingInfo", "cols", "asc", "sorts", "s", "field", "sign", "value1", "value2", "result", "sort", "comparer", "ascending", "getLocalSort", "setLocalSort", "value", "fastSort", "oldToString", "reSort", "getFilteredItems", "getFilter", "setFilter", "filterFn", "compileFilter", "compileFilterWithCaching", "getGrouping", "setSummaryOptions", "summary", "idx", "compileAccumulatorLoop", "setGrouping", "getGrandTotals", "agg", "groupingInfo", "gi", "extend", "deepClone", "getItemByIdx", "getIdxById", "ensureRowsByIdCache", "getRowByItem", "item", "getRowById", "getItemById", "mapItemsToRows", "itemArray", "row", "mapIdsToRows", "idArray", "mapRowsToIds", "rowArray", "ids", "updateItem", "newId", "insertItem", "insertBefore", "addItem", "deleteItem", "sortedAddItem", "sortedIndex", "sortedUpdateItem", "oldItem", "searchItem", "low", "high", "mid", "getRows", "getLength", "getItem", "calculateTotals", "getItemMetadata", "expandCollapseAllGroups", "level", "collapse", "collapseAllGroups", "expandAllGroups", "resolveLevelAndGroupingKey", "arg0", "expandCollapseGroup", "opts", "collapseGroup", "varArgs", "expandGroup", "getGroups", "getOrCreateGroup", "groupsByVal", "val", "parentGroup", "group", "Group", "extractGroups", "r", "addTotals", "totals", "isLeafLevel", "addGroupTotals", "GroupTotals", "groupCollapsed", "toggledGroups", "g", "flattenGroupedRows", "groupedRows", "gl", "j", "jj", "getFunctionInfo", "fn", "fnRegex", "matches", "aggregator", "accumulatorInfo", "filterInfo", "filterBody", "tpl", "fnName", "setFunctionName", "err", "uncompiledFilter", "retval", "ii", "uncompiledFilterWithCaching", "cache", "getFilteredAndPagedItems", "batchFilter", "batchFilterWithCaching", "getRowDiffs", "newRows", "eitherIsNonData", "diff", "from", "to", "rl", "_items", "countBefore", "totalRowsBefore", "syncGridSelection", "grid", "preserveHidden", "preserveHiddenOnSelectionChange", "inHandler", "selectedRowIds", "onSelectedRowIdsChanged", "setSelectedRowIds", "rowIds", "EventData", "update", "selectedRows", "e", "newSelectedRowIds", "existing", "syncGridCellCssStyles", "key", "hashById", "storeCellCssStyles", "hash", "newHash", "subFunc", "addData", "gh", "request", "skip", "dt", "ajaxOptions", "response", "notifyError", "xhr", "status", "ev", "json", "ah", "populateLock", "populateUnlock", "text"]
}
